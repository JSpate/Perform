using Microsoft.Extensions.Logging;
using Perform;
using Perform.Model;
using Perform.Interfaces;
using System;
using System.Threading;
using System.Threading.Tasks;
using Math = Perform.Scripting.MathMethods;

public class GeneratedShowScript
{
    private readonly ShowScript _showScript;
    private readonly ILogger _logger;


    public GeneratedShowScript(ShowScript showScript, ILogger logger)
    {
        _showScript = showScript;
        _logger = logger;
    }

    public void Initialise()
    {
        _showScript.AddEventHandler(typeof(EventHandler0001), EventType.StartSong);
    }

    public void Finalize() {
        _showScript.RemoveEventHandler(typeof(EventHandler0001), EventType.StartSong);
    }
    
    private class EventHandler0001 : IScriptEventHandler
    {
        private readonly ShowScript _showScript;
        private readonly ILogger _logger;
    
        private ScriptLoopStatus _status = ScriptLoopStatus.Continue;
    
        public EventHandler0001(ShowScript showScript, ILogger logger)
        {
            _showScript = showScript;
            _logger = logger;
        }
    
        public void Initialize()
        {
            var started = true;
    
        }
    
        public void Loop()
        {
            _logger.LogInformation("Loop running") ;
        }
    
    
        public ScriptLoopStatus Status => _status;
    
    }
    
}
